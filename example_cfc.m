
addpath(genpath('/Users/andrew/Software/CFC'));

%% Metadata

sample_rate = 512;


%% Simulate a signal

S = struct('seconds',           40, ...
           'sample_rate',       sample_rate,...
           'modulating_freq',   8,...
           'modulating_amp',    1,...
           'modulated_freq',    60,...
           'modulated_amp',     .25,...
           'noise_ratio',       .2,...
           'phase_lag',         pi/2,...
           'noise_level',       -10,...
           'switching_freq',    .25,...
           'method',            'aq');
signal = cfc_simulate(S);


%% Split into pac signals
signals = cfc_util_basesignals(signal.signal,sample_rate,...
                               [53 66],...
                               [6 10],...
                               signal.time_vect,...
                               signal.state_switching);

%% Estimate some metrics
esc  = cfc_est_esc(signals.theta,signals.gamma_amp);
nesc = cfc_est_nesc(signals.theta_phase,signals.gamma_amp);
plv  = cfc_est_plv(signals.theta_phase,signals.gamma_amp_phase);
glm  = cfc_est_glm(signals.theta_phase,signals.gamma_amp);
mi   = cfc_est_mi(signals.theta_phase,signals.gamma_amp);
aec  = cfc_est_aec(signals.theta_amp,signals.gamma_amp);

%% Estimate sliding window metrics

% Make sliding window data
window_size = fix(1.2*sample_rate); % in samples
step = fix(sample_rate/4); % in samples

sw_signals = cfc_util_swsignals(signals,window_size,step);

sw_esc  = cfc_est_esc(sw_signals.theta,sw_signals.gamma_amp);
sw_nesc = cfc_est_nesc(sw_signals.theta_phase,sw_signals.gamma_amp);
sw_plv  = cfc_est_plv(sw_signals.theta_phase,sw_signals.gamma_amp_phase);
sw_glm  = cfc_est_glm(sw_signals.theta_phase,sw_signals.gamma_amp);
sw_mi   = cfc_est_mi(sw_signals.theta_phase,sw_signals.gamma_amp);
sw_minorm   = cfc_est_minorm(sw_signals.theta_phase,sw_signals.gamma_amp);
sw_aec  = cfc_est_aec(sw_signals.theta_amp,sw_signals.gamma_amp);

%% Estimate simple CFC

cfc_cfg = struct('sr',      sample_rate,...
    'lo_freq',              8,...
    'lo_bandwidth',         2,...
    'hi_freq',              60,...
    'hi_bandwidth',         20,...
    'metrics',               {{'MI','PLV'}});

cfc_results = estimate_cfc(signal.signal,cfc_cfg);
cfc_plot_sw(cfc_results)

%% Estimate CFC with permutations

cfc_cfg = struct('sr',      sample_rate,...
    'lo_freq',              8,...
    'lo_bandwidth',         2,...
    'hi_freq',              60,...
    'hi_bandwidth',         20,...
    'metrics',               {{'MI','PLV'}},...
    'nperms',               250);

cfc_results = estimate_cfc(signal.signal,cfc_cfg);
cfc_plot_sw(cfc_results)

%% Estimate CFC with sliding windows

cfc_cfg = struct('sr',      sample_rate,...
    'lo_freq',              8,...
    'lo_bandwidth',         2,...
    'hi_freq',              60,...
    'hi_bandwidth',         20,...
    'metrics',               {{'MI'}},...
    'window_size',          sample_rate,...
    'window_step',          sample_rate/4);

cfc_results = estimate_cfc(signal.signal,cfc_cfg);
cfc_plot_sw(cfc_results)

%% Estimate CFC with sliding windows

cfc_cfg = struct('sr',      sample_rate,...
    'lo_freq',              8,...
    'lo_bandwidth',         2,...
    'hi_freq',              60,...
    'hi_bandwidth',         20,...
    'metrics',               {{'MI'}},...
    'nperms',               250,...
    'window_size',          sample_rate,...
    'window_step',          sample_rate/4);

cfc_results = estimate_cfc(signal.signal,cfc_cfg);
cfc_plot_sw(cfc_results)

%% Estimate a comodulogram
cmg_cfg = struct('sr',      sample_rate,...
    'lo_bounds',           [6 20],...
    'lo_bandwidth',        2,...
    'lo_step',             1,...
    'hi_bounds',           [20 200],...
    'hi_bandwidth',        'adaptive',...
    'hi_step',             5,...
    'metrics',             {{'MI','MI_NORM'}});

cmg = estimate_comodulogram(signal.signal(:,1:1536),cmg_cfg);
cfc_plot_cmg(cmg)

%% Estimate a sliding window comodulogram

cmg_cfg = struct('sr',      sample_rate,...
    'window_size',          5,...
    'step',                 .5,...
    'signal',               signal.signal(:,1),...
    'lo_bounds',            [6 30],...
    'lo_bandwidth',         2,...
    'lo_step',              1,...
    'hi_bounds',            [30 200],...
    'hi_bandwidth',         'adaptive',...
    'hi_step',              2,...
    'metrics',              {{'MI','PLV'}});

sw_cmg = estimate_comodulogram(signal.signal(:,1:1536),cmg_cfg);


%% Epoched Data

S = struct('seconds',           400, ...
           'sample_rate',       sample_rate,...
           'modulating_freq',   8,...
           'modulating_amp',    1,...
           'modulated_freq',    60,...
           'modulated_amp',     .25,...
           'noise_ratio',       .2,...
           'phase_lag',         0,...
           'noise_level',       -2,...
           'switching_freq',    4,...
           'method',            'mw');
signal = cfc_simulate(S);
signal = cfc_util_swsignals(signal,fix(sample_rate)*4,fix(sample_rate)*4);

signal = cfc_util_basesignals(signal.signal,sample_rate,...
                               [53 66],...
                               [6 10],...
                               signal.time_vect,...
                               signal.state_switching);

% Split time series into 99 trials
signal = cfc_util_swsignals(signal,fix(sample_rate)*4,fix(sample_rate)*4);

% should go from [1,2500,99] to [1,
trial_signals = cfc_utils_stacktrials(signal,...
                                      fix(sample_rate)/2,'stack');

test_signals = cfc_utils_stacktrials(trial_signals,...
                                      fix(sample_rate)/2,'unstack');

%%
cfg = struct('sr',          sample_rate,...
             'lo_freq',     8,...
             'lo_bandwidth',2,...
             'hi_freq',     60,...
             'hi_bandwidth',20,...
             'metrics',      {{'MI'}},...
             'window_size', fix(sample_rate/8));
cfc_results = estimate_task_cfc(signal.signal,cfg);


%% Epochwise comodulogram NOT WORKING

cmg_cfg = struct('sr',      sample_rate,...
    'lo_bounds',           [6 20],...
    'lo_bandwidth',        2,...
    'lo_step',             1,...
    'hi_bounds',           [20 200],...
    'hi_bandwidth',        'adaptive',...
    'hi_step',             5,...
    'metrics',             {{'MI','MI_NORM'}});

cmg = estimate_comodulogram(signal.signal,cmg_cfg);

